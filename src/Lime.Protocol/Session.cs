using Lime.Protocol.Security;
using Lime.Protocol.Serialization;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace Lime.Protocol
{
    /// <summary>
    /// Represents a client session with the
    /// server and its current state
    /// </summary>
    [DataContract(Namespace = "http://limeprotocol.org/2014")]
    public partial class Session : Envelope
    {
        public const string STATE_KEY = "state";
        public const string MODE_KEY = "mode";
        public const string ENCRYPTION_OPTIONS_KEY = "encryptionOptions";
        public const string ENCRYPTION_KEY = "encryption";
        public const string COMPRESSION_OPTIONS_KEY = "compressionOptions";
        public const string COMPRESSION_KEY = "compression";
        public const string SCHEME_OPTIONS_KEY = "schemeOptions";
        public const string SCHEME_KEY = "scheme";
        public const string AUTHENTICATION_KEY = "authentication";
        public const string REASON_KEY = "reason";

        public Session()
            : base(Guid.Empty)
        {
            // The session id is generated by the server
        }

        /// <summary>
        ///  Informs or changes the state of a session. 
        ///  Only the server can change the session state, 
        ///  but the client can request the state transition. 
        /// </summary>
        [DataMember(Name = STATE_KEY)]
        public SessionState State { get; set; }

        /// <summary>
        /// Defines the role of the 
        /// client node in the session with the server.
        /// </summary>
        [DataMember(Name = MODE_KEY, EmitDefaultValue = false)]
        [DefaultValue(SessionMode.Node)]
        public SessionMode Mode { get; set; }

        /// <summary>
        /// Encryption options provided by 
        /// the server during the session negotiation.
        /// </summary>
        [DataMember(Name = ENCRYPTION_OPTIONS_KEY, EmitDefaultValue = false)]
        public SessionEncryption[] EncryptionOptions { get; set; }

        /// <summary>
        /// The encryption option selected for the session. 
        /// This property is provided by the client in the 
        /// negotiation and by the server in the confirmation 
        /// after that.
        /// </summary>
        [DataMember(Name = ENCRYPTION_KEY)]
        public SessionEncryption? Encryption { get; set; }

        /// <summary>
        /// Compression options provided by the 
        /// server during the session negotiation.
        /// </summary>
        [DataMember(Name = COMPRESSION_OPTIONS_KEY, EmitDefaultValue = false)]
        public SessionCompression[] CompressionOptions { get; set; }

        /// <summary>
        /// The compression option selected for the session. 
        /// This property is provided by the client in the 
        /// negotiation and by the server in the confirmation 
        /// after that.
        /// </summary>
        [DataMember(Name = COMPRESSION_KEY)]
        public SessionCompression? Compression { get; set; }

        /// <summary>
        /// List of available authentication schemas 
        /// for session authentication provided by the server.
        /// </summary>
        [DataMember(Name = SCHEME_OPTIONS_KEY)]
        public AuthenticationScheme[] SchemeOptions { get; set; }

        /// <summary>
        /// The authentication scheme option selected 
        /// for the session. This property must be present 
        /// if the property authentication is defined.
        /// </summary>
        [DataMember(Name = SCHEME_KEY)]
        public AuthenticationScheme? Scheme
        {
            get
            {
                if (this.Authentication != null)
                {
                    return this.Authentication.GetAuthenticationScheme();
                }

                return null;
            }
        }

        /// <summary>
        /// Authentication data, related to the selected schema. 
        /// Information like password sent by the client or 
        /// roundtrip data sent by the server.
        /// </summary>
        [DataMember(Name = AUTHENTICATION_KEY)]
        public Authentication Authentication { get; set; }

        /// <summary>
        /// In cases where the client receives a session with 
        /// failed state, this property should provide more 
        /// details about the problem.
        /// </summary>
        [DataMember(Name = REASON_KEY)]
        public Reason Reason { get; set; }       
    }

    /// <summary>
    /// Defines the session modes that
    /// a identity can connect to a server
    /// </summary>
    [DataContract(Namespace = "http://limeprotocol.org/2014")]
    public enum SessionMode
    {
        /// <summary>
        /// Default mode. 
        /// Allows the message, notification 
        /// and command exchange with other nodes.
        /// </summary>
        [EnumMember(Value = "node")]
        Node,
        /// <summary>
        /// Establish a session between server 
        /// of the same domain. The servers exchange 
        /// information about the connected nodes 
        /// and forward messages from local nodes 
        /// to remote nodes.
        /// </summary>
        [EnumMember(Value = "server")]
        Server,
        /// <summary>
        /// In this mode, the server defines a subdomain 
        /// to forward messages and commands addressed to 
        /// identities of this subdomain. For instance, if 
        /// the user chat@domain.com starts a session in 
        /// the application mode, a message addressed to 
        /// anyuser@chat.mydomain.com will be delivered 
        /// to the node chat@domain.com.
        /// </summary>
        [EnumMember(Value = "application")]
        Application,
        /// <summary>
        /// Establish a session between servers of different 
        /// domains. The gateway session receive messages 
        /// addressed to identities of the specified domain 
        /// and can send messages to local nodes sent by 
        /// foreign nodes.
        /// </summary>
        [EnumMember(Value = "gateway")]
        Gateway
    }

    /// <summary>
    /// Defines the supported session states
    /// </summary>
    [DataContract(Namespace = "http://limeprotocol.org/2014")]
    public enum SessionState
    {
        /// <summary>
        /// The session is new and doesn't exists an 
        /// established context. It is sent by a client 
        /// node to start a session with a server.
        /// </summary>
        [EnumMember(Value = "new")]
        New,
        /// <summary>
        /// The server and the client are negotiating the 
        /// session options, like cryptography and compression. 
        /// The server sends to the client the options (if available) 
        /// and the client chooses the desired options. 
        /// If there's no options (for instance, if the connection 
        /// is already encrypted or the transport protocol doesn't 
        /// support these options), the server SHOULD skip the negotiation.
        /// </summary>
        [EnumMember(Value = "negotiating")]
        Negotiating,
        /// <summary>
        /// The session is being authenticated. The server sends to 
        /// the client the available authentication schemes list and 
        /// the client must choose one and send the specific authentication 
        /// data. The authentication can occurs in multiple roundtrips, 
        /// according to the selected schema.
        /// </summary>
        [EnumMember(Value = "authenticating")]
        Authenticating,
        /// <summary>
        /// The session is active and is possible to send and receive 
        /// messages and commands. The server sends this state 
        /// after the session was authenticated.
        /// </summary>
        [EnumMember(Value = "established")]
        Established,
        /// <summary>
        /// The client node is requesting to 
        /// the server to finish the session.
        /// </summary>
        [EnumMember(Value = "finishing")]
        Finishing,
        /// <summary>
        /// The session was gracefully 
        /// finished by the server.
        /// </summary>
        [EnumMember(Value = "finished")]
        Finished,
        /// <summary>
        /// A problem occurred while the session was established, under 
        /// negotiation or authentication and it was closed by the server. 
        /// In this case, the property reason MUST be present to provide 
        /// more details about the problem.
        /// </summary>
        [EnumMember(Value = "failed")]
        Failed
    }

    /// <summary>
    /// Defines the valid session encryption values.
    /// </summary>
    [DataContract(Namespace = "http://limeprotocol.org/2014")]
    public enum SessionEncryption
    {
        /// <summary>
        /// The session is not encrypted.
        /// </summary>
        [EnumMember(Value = "none")]
        None,
        /// <summary>
        /// The session is encrypted by TLS 
        /// (Transport Layer Security).
        /// </summary>
        [EnumMember(Value = "tls")]
        TLS
    }

    /// <summary>
    /// Defines the valid session compression values.
    /// </summary>
    [DataContract(Namespace = "http://limeprotocol.org/2014")]
    public enum SessionCompression
    {
        /// <summary>
        /// The session is not compressed.
        /// </summary>
        [EnumMember(Value = "none")]
        None,
        /// <summary>
        /// The session is using the GZip 
        /// algorithm for compression.
        /// </summary>
        [EnumMember(Value = "gzip")]        
        GZip
    }
}
